/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

//import java.awt.Dimension;
//import javax.swing.border.BevelBorder;
//import javax.swing.event.PopupMenuListener;
//import javax.swing.JOptionPane;
//import javax.swing.JLabel;
//import javax.swing.ImageIcon;
//import java.net.URL;

/**
 *
 * @author No Name
 */
public class GraphFrame extends javax.swing.JFrame {

    /**
     * Creates new form GraphFrame
     */
    public GraphFrame() {
        initComponents();
    }
    BufferedImage bufImg;
    JPopupMenu menu;
    String imageName;
    int cont = 0;
    Timer t;

    public GraphFrame(String imageName) {
        this();
        this.imageName = imageName;
        menu = new JPopupMenu();
        setTitle(imageName);
        t = new javax.swing.Timer(200, new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent e) {
                //do an icon change
                try {
                    bufImg = ImageIO.read(new File(imageName + ".png"));
                    setSize(bufImg.getWidth() + 50, bufImg.getHeight() + 50);
                } catch (Exception ex) {
                    cont=-2;
                }
                cont++;
                if (cont >= 2) {
                    t.stop();
                }
                if (cont > 0) {
                    setVisible(true);
                }
            }
        });
        ActionListener menuListener = new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                String lastPath=".";
                try{
                    lastPath=FileUtils.readFile(new File("lastPath.du"));
                }catch(Exception e){}
                
                JFileChooser fileChooser = new JFileChooser(""+lastPath.trim());
                FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "PNG images", "png");
                
                fileChooser.setFileFilter(filter);
                fileChooser.setSelectedFile(new File(imageName));
                repaint();
                
                if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                    File outputfile = new File(fileChooser.getSelectedFile()+".png");
                    try {
                        ImageIO.write(bufImg, "png", outputfile);
                    } catch (IOException ex) {
                        Logger.getLogger(GraphFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    lastPath=outputfile.getParent();
                    FileUtils.write("lastPath", lastPath,"du");
                    
                }
                repaint();
            }
        };
        
        t.start();
        JMenuItem item;
        menu.add(item = new JMenuItem("Save Image"));
        item.setHorizontalTextPosition(JMenuItem.RIGHT);
        item.addActionListener(menuListener);
        this.addMouseListener(new MousePopupListener());

    }

    class MousePopupListener extends MouseAdapter {

        public void mousePressed(MouseEvent e) {
            checkPopup(e);
            repaint();
        }

        public void mouseClicked(MouseEvent e) {
            checkPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            checkPopup(e);
        }

        private void checkPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                menu.show(GraphFrame.this, e.getX(), e.getY());
            }
        }
    }

    public void resize() {
        this.setSize((int) (bufImg.getWidth() * 1.1), (int) (bufImg.getHeight() * 1.1));
    }

    public void paint(Graphics g) {
        g.setColor(Color.white);
        g.fillRect(0, 0, bufImg.getWidth() * 2, bufImg.getHeight() * 2);
        g.drawImage(bufImg, 5, 30, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 505, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 412, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
